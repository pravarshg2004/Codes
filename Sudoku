def print_board(board):
    """Print the Sudoku board in a readable format."""
    for row in board:
        print(" ".join(str(num) if num != 0 else '.' for num in row))

def find_empty_location(board):
    """Find an empty location on the board (represented by 0)."""
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

def is_safe(board, row, col, num):
    """Check if it's safe to place a number in the given position."""
   
    if num in board[row]:
        return False
    
   
    if num in [board[i][col] for i in range(9)]:
        return False
    
    
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False
    
    return True

def solve_sudoku(board):
    """Solve the Sudoku puzzle using backtracking."""
    empty_location = find_empty_location(board)
    if not empty_location:
        return True  
    
    row, col = empty_location
    
    for num in range(1, 10):
        if is_safe(board, row, col, num):
            board[row][col] = num
            
            if solve_sudoku(board):
                return True
            
           
            board[row][col] = 0
    
    return False  

def input_sudoku_board():
    board = []
    print("Enter the Sudoku board (0 for empty cells, rows separated by new lines):")
    for _ in range(9):
        row = list(map(int, input().split()))
        board.append(row)
    return board

sudoku_board = input_sudoku_board()

if solve_sudoku(sudoku_board):
    print("Sudoku puzzle solved:")
    print_board(sudoku_board)
else:
    print("No solution exists.")
