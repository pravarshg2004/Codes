def print_board(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

def is_safe(board, row, col, N):
    for i in range(row):
        if board[i][col]:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j]:
            return False
    return True

def solve_n_queens_util(board, row, N):
    if row >= N:
        print_board(board)
        return True
    res = False
    for i in range(N):
        if is_safe(board, row, i, N):
            board[row][i] = True
            res = solve_n_queens_util(board, row + 1, N) or res
            board[row][i] = False
    return res

def solve_n_queens(N):
    board = [[False for _ in range(N)] for _ in range(N)]
    if not solve_n_queens_util(board, 0, N):
        print("No solution exists")

def main():
    try:
        N = int(input("Enter the number of queens (N): "))
        if N <= 0:
            print("Please enter a positive integer.")
        else:
            solve_n_queens(N)
    except ValueError:
        print("Invalid input. Please enter a positive integer.")

if __name__ == '__main__':
    main()
